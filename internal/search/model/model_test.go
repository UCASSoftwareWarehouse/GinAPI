package model

import (
	"GinAPI/models"
	"encoding/json"
	"testing"
)

func TestModel(t *testing.T) {
	text := "[\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"rpc_cli/init.go\",\n        \"Content\": \"package rpc_cli\\n\\nimport \\\"GinAPI/pb_gen\\\"\\n\\nvar (\\n\\tCodeSimCli pb_gen.CodeSimClient\\n)\\n\\nfunc InitRPCClient() {\\n\\tCodeSimCli = initCodeSimCli()\\n}\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"api/swagger/route.go\",\n        \"Content\": \"package swagger\\n\\nimport (\\n\\t\\\"github.com/gin-gonic/gin\\\"\\n\\tginSwagger \\\"github.com/swaggo/gin-swagger\\\"\\n\\t\\\"github.com/swaggo/gin-swagger/swaggerFiles\\\"\\n)\\n\\nfunc Register(r *gin.Engine) {\\n\\tr.GET(\\\"/swagger/*any\\\", ginSwagger.WrapHandler(swaggerFiles.Handler))\\n}\\n\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"middlewares/CORS.go\",\n        \"Content\": \"package middlewares\\n\\nimport \\\"github.com/gin-gonic/gin\\\"\\n\\nfunc Cors() gin.HandlerFunc {\\n\\treturn func(c *gin.Context) {\\n\\t\\tc.Header(\\\"Access-Control-Allow-Origin\\\", \\\"*\\\")\\n\\t\\tc.Next()\\n\\t}\\n}\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"internal/local/handler.go\",\n        \"Content\": \"package local\\n\\nimport (\\n\\t\\\"GinAPI/internal/local/code_sim_uploader\\\"\\n)\\n\\ntype Handler struct {}\\n\\nvar handler = &Handler{}\\n\\nfunc GetHandler() *Handler {\\n\\treturn handler\\n}\\n\\nfunc (*Handler) UploadSourceCode() {\\n\\tcode_sim_uploader.UploadSourceCode(\\\"\\\")\\n}\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"api/route.go\",\n        \"Content\": \"package api\\n\\nimport (\\n\\t\\\"GinAPI/api/search_api\\\"\\n\\t\\\"GinAPI/api/swagger\\\"\\n\\t\\\"github.com/gin-gonic/gin\\\"\\n)\\n\\nfunc Register(r *gin.Engine) {\\n\\tr.GET(\\\"/ping\\\", ping)\\n\\tswagger.Register(r)\\n\\tsearch_api.Register(r)\\n}\\n\\nfunc ping(c *gin.Context) {\\n\\tc.JSON(200, gin.H{\\n\\t\\t\\\"message\\\": \\\"pong\\\",\\n\\t})\\n}\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"format/resp_format.go\",\n        \"Content\": \"package format\\n\\nimport \\\"net/http\\\"\\n\\ntype JSONRespFormat struct {\\n\\tStatus int `json:\\\"status\\\"`\\n\\tMessage string `json:\\\"message\\\"`\\n\\tData interface{} `json:\\\"data\\\"`\\n}\\n\\nfunc SimpleOKResp(data interface{}) *JSONRespFormat {\\n\\treturn &JSONRespFormat{\\n\\t\\tStatus:  http.StatusOK,\\n\\t\\tMessage: \\\"success\\\",\\n\\t\\tData:    data,\\n\\t}\\n}\\n\\nfunc NewJSONResp(statusCode int, msg string, data interface{}) *JSONRespFormat {\\n\\treturn &JSONRespFormat{\\n\\t\\tStatus:  statusCode,\\n\\t\\tMessage: msg,\\n\\t\\tData:    data,\\n\\t}\\n}\\n\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"rpc_cli/code_sim_cli.go\",\n        \"Content\": \"package rpc_cli\\n\\nimport (\\n\\t\\\"GinAPI/config\\\"\\n\\t\\\"GinAPI/pb_gen\\\"\\n\\t\\\"google.golang.org/grpc\\\"\\n)\\n\\nfunc initCodeSimCli() pb_gen.CodeSimClient {\\n\\tvar dialOpt []grpc.DialOption\\n\\tdialOpt = append(dialOpt, grpc.WithDefaultCallOptions(grpc.MaxCallRecvMsgSize(5 * 1024 * 1024 * 1024 * 1024), grpc.MaxCallSendMsgSize(5 * 1024 * 1024 * 1024 * 1024)), grpc.WithInsecure())\\n\\tconn, err := grpc.Dial(config.Conf.CodeSimServiceAddr, dialOpt...)\\n\\tif err != nil {\\n\\t\\tpanic(err)\\n\\t}\\n\\tcli := pb_gen.NewCodeSimClient(conn)\\n\\treturn cli\\n}\\n\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"main.go\",\n        \"Content\": \"package main\\n\\nimport (\\n\\t\\\"GinAPI/api\\\"\\n\\t\\\"GinAPI/config\\\"\\n\\t_ \\\"GinAPI/docs\\\"\\n\\t\\\"GinAPI/middlewares\\\"\\n\\t\\\"GinAPI/rpc_cli\\\"\\n\\t\\\"fmt\\\"\\n\\t\\\"github.com/gin-gonic/gin\\\"\\n)\\n\\n// @title SoftwareWarehouse Web API\\n// @version 1.0\\n// @description This is a SoftwareWarehouse API server.\\n\\n// @contact.name API Support\\n// @contact.url http://www.swagger.io/support\\n// @contact.email support@swagger.io\\n\\n// @license.name Apache 2.0\\n// @license.url http://www.apache.org/licenses/LICENSE-2.0.html\\n\\n// @BasePath\\nfunc main() {\\n\\tconfig.InitConfigDefault()\\n\\trpc_cli.InitRPCClient()\\n\\tr := gin.Default()\\n\\tregisterMiddleware(r)\\n\\tapi.Register(r)\\n\\taddr := fmt.Sprintf(\\\"%s:%d\\\", config.Conf.Host, config.Conf.Port)\\n\\terr := r.Run(addr) // listen and serve on 0.0.0.0:8080\\n\\tif err != nil {\\n\\t\\tpanic(err)\\n\\t}\\n}\\n\\nfunc registerMiddleware(r *gin.Engine) {\\n\\tr.Use(middlewares.Cors())\\n}\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"format/api_format.go\",\n        \"Content\": \"package format\\n\\nimport (\\n\\t\\\"GinAPI/err\\\"\\n\\t\\\"github.com/gin-gonic/gin\\\"\\n\\t\\\"net/http\\\"\\n)\\n\\ntype SimpleJSONHandler func(*gin.Context) (*JSONRespFormat, *err.APIErr)\\ntype NormalHandler func(*gin.Context)\\n\\nfunc UnwrapSimpleJSONHandler(handler SimpleJSONHandler) func(c *gin.Context) {\\n\\treturn func(c *gin.Context) {\\n\\t\\tresp, e := handler(c)\\n\\t\\tif e != nil {\\n\\t\\t\\tc.JSON(e.Status, NewJSONResp(e.Status, e.Message, nil))\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\tif resp == nil {\\n\\t\\t\\tc.JSON(http.StatusOK, SimpleOKResp(nil))\\n\\t\\t\\treturn\\n\\t\\t}\\n\\t\\tc.JSON(resp.Status, NewJSONResp(resp.Status, resp.Message, resp.Data))\\n\\t}\\n}\"\n      },\n      {\n        \"project_name\": \"yzc_proj_1\",\n        \"tag\": \"v1.0\",\n        \"RelPath\": \"config/model.go\",\n        \"Content\": \"package config\\n\\nimport (\\n\\t\\\"gopkg.in/yaml.v2\\\"\\n\\t\\\"io/ioutil\\\"\\n\\t\\\"log\\\"\\n)\\n\\ntype ConfigurationEnv string\\n\\nconst (\\n\\tDevEnv ConfigurationEnv = \\\"dev\\\"\\n\\tPrdEnv ConfigurationEnv = \\\"prd\\\"\\n)\\n\\ntype Configuration map[ConfigurationEnv]*EachConfig\\n\\ntype EachConfig struct {\\n\\tAppName            string `yaml:\\\"app_name\\\"`\\n\\tHost               string `yaml:\\\"host\\\"`\\n\\tPort               int    `yaml:\\\"port\\\"`\\n\\tCodeSimServiceAddr string `yaml:\\\"code_sim_service_addr\\\"`\\n}\\n\\nconst (\\n\\tDefaultConfigFilepath = \\\"/Users/purchaser/go/src/GinAPI/config.yml\\\"\\n)\\n\\nfunc parse(configFilepath string) Configuration {\\n\\tif configFilepath == \\\"\\\" {\\n\\t\\tconfigFilepath = DefaultConfigFilepath\\n\\t}\\n\\tbs, err := ioutil.ReadFile(configFilepath)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"ConfigForEnv parse failed, read file failed, err=[%v]\\\", err)\\n\\t}\\n\\tconf := make(Configuration)\\n\\terr = yaml.Unmarshal(bs, &conf)\\n\\tif err != nil {\\n\\t\\tlog.Fatalf(\\\"ConfigForEnv parse failed, unmarshal config failed, err=[%v]\\\", err)\\n\\t}\\n\\treturn conf\\n}\\n\"\n      }\n    ]"
	var res []*models.ProjectFile
	err := json.Unmarshal([]byte(text), &res)
	if err != nil {
		t.Fatal(err)
	}
	for _, f := range res {
		t.Log(f.Content)
	}
}
